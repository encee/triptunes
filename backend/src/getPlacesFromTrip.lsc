import { flatten, uniqBy } from 'lodash'
import mapsClient from './googleMapsClient'


coordinatesToPlace(coordinates) -/>
  response <- mapsClient.reverseGeocode({latlng: coordinates}).asPromise()
  results = response.json.results
  // console.dir(results, {depth: null})

  components = results
    .map(result -> result.address_components)
    ~flatten()

  localities = components
    .filter(component -> component.types.includes('locality'))
    .map(component -> component.long_name)

  state = components
    .filter(component -> component.types.includes('administrative_area_level_1'))
    .map(component -> component.short_name)
    .0 // eslint-disable-line no-unexpected-multiline

  localities.map(locality =>
    { name: `${locality}, ${state}` }
  )


export default getPlacesFromTrip(coordinates_list) -/>
  places <- Promise.all(coordinates_list.map(coordinatesToPlace))

  places
    ~flatten()
    ~uniqBy('name')
